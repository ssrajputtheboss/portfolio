{"version":3,"sources":["Components/Header/ShowCard/SkillTag/index.tsx","Components/Header/ShowCard/index.tsx","Components/Header/index.tsx","Components/Main/ExpandableCard/CardHeading/index.tsx","helpers/readme.ts","helpers/data.ts","Components/ReadMe/GetReadMeWidget/index.tsx","Components/ReadMe/index.tsx","Components/Main/ExpandableCard/index.tsx","Components/TerminalUI/TerminalTitle/index.tsx","Components/TerminalUI/index.tsx","Components/Main/index.tsx","helpers/commands.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SkillTag","name","icon","iconColor","maxW","base","lg","flexDir","alignItems","justifyContent","p","as","h","sm","w","color","fontSize","ShowCard","props","style","display","isVisible","borderRadius","borderWidth","borderColor","bgColor","fontWeight","mx","href","aria-label","CgOrganisation","orientation","templateColumns","gap","RiFlutterFill","SiAndroidstudio","SiReact","SiNodeDotJs","SiMongodb","DiPostgresql","SiPython","Header","useState","isOpen","setIsOpen","top","position","mt","src","hasArrow","label","colorScheme","onClick","e","FaChevronLeft","FaChevronRight","CardHeader","title","lang","fetchReadMeFromURL","url","a","fetch","then","res","text","_","isString","getReadMeJSON","data","reCode","obj","Map","list","codes","match","isNull","i","length","push","toString","replace","extractCodeAndLinkFromReadMe","lines","split","k","lastHeader","type","info","index","line","exec","set","content","trim","includes","startsWith","hashes","count","get","jsonData","GetReadMeWidget","c","rkey","rvalue","m","showLineNumbers","language","docco","alt","ReadMe","setText","useEffect","fetchData","readmeJson","imgUrls","Array","from","filter","readmeUi","map","v","imageGrid","id","ExpandableCard","overflowX","boxShadow","header","description","RiArrowUpSLine","RiArrowDownSLine","TerminalTitle","onClose","borderTopRadius","mr","AiFillCloseCircle","TerminalUI","getCommand","lastText","setLastText","isTerminalOpen","setIsTerminalOpen","bottom","minH","overflowY","px","textColor","substring","border","onKeyDown","keyCode","command","input","output","value","execCommand","currentTarget","preventDefault","parentElement","scrollTop","scrollHeight","_focus","outline","right","BsTerminal","Main","cards","setCards","performOperation","operation","func","subFunc","sType","sort","x","y","word","toLowerCase","pname","cmd","callback","cjson","main","args","arg","join","validateCommand","commandLine","words","slice","commandStringToJSON","App","textAlign","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4248f32a.chunk.js","sourcesContent":["import{\r\n    Tag,\r\n    Text,\r\n    Icon,\r\n    Flex\r\n} from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { Skill } from '../../../../Models';\r\n\r\nexport default function SkillTag( { name , icon , iconColor } : Skill ):React.ReactElement{\r\n    return <Tag\r\n    maxW={{ base: \"20\" , lg:\"2xl\"}}\r\n    >\r\n        <Flex\r\n        flexDir=\"column\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"space-between\"\r\n        p=\"2\">\r\n            <Icon as={icon} h={{ sm: \"8\", lg:\"20\"}} w={{ sm: \"8\", lg:\"20\"}} color={iconColor} />\r\n            <Text fontSize=\"smaller\" color=\"green.900\">{ name }</Text>\r\n        </Flex>\r\n    </Tag>\r\n}","import { \r\n    Box ,\r\n    Flex , \r\n    Divider ,\r\n    Text ,\r\n    IconButton,\r\n    Icon , \r\n    Grid\r\n} from '@chakra-ui/react';\r\n\r\nimport { CgOrganisation } from 'react-icons/cg';\r\nimport { RiFlutterFill } from 'react-icons/ri';\r\nimport { DiPostgresql } from 'react-icons/di';\r\nimport { \r\n    SiAndroidstudio ,\r\n    SiReact ,\r\n    SiNodeDotJs ,\r\n    SiMongodb ,\r\n    SiPython\r\n} from 'react-icons/si';\r\nimport SkillTag from './SkillTag';\r\n\r\ninterface Props{\r\n    isVisible:boolean\r\n}\r\n\r\nexport default function ShowCard(props: Props): React.ReactElement{\r\n    return <Box\r\n    w=\"fit-content\"\r\n    maxW={{ base: \"100%\" , lg:\"3xl\" }}\r\n    style={{ display: props.isVisible ? 'block':'none' }}\r\n    borderRadius=\"xl\"\r\n    borderWidth=\"medium\"\r\n    borderColor=\"teal.900\"\r\n    bgColor=\"teal.100\"\r\n    >\r\n        <Flex\r\n            flexDir=\"column\"\r\n            alignItems=\"start\"\r\n            justifyContent=\"start\"\r\n            p=\"4\"\r\n            >\r\n            <Text fontSize=\"xl\" fontWeight=\"extrabold\" > SHASHANK SINGH </Text>\r\n            <Flex\r\n            w=\"full\"\r\n            flexDir=\"row\"\r\n            justifyContent=\"start\"\r\n            alignItems=\"center\"\r\n            p=\"2\"\r\n            >\r\n                <Text fontSize=\"sm\"  mx=\"2\">Currently B.Tech CSE 3rd year student at</Text>\r\n                <a href=\"https://www.iiitkottayam.ac.in/#!/home\" >\r\n                    <Flex\r\n                    w=\"fit-content\"\r\n                    flexDir=\"row\"\r\n                    justifyContent=\"end\"\r\n                    alignItems=\"center\"\r\n                    >\r\n                        <IconButton\r\n                        aria-label=\"icon\"\r\n                        h=\"7\"\r\n                        w=\"7\"\r\n                        mx=\"2\"\r\n                        >\r\n                            <Icon as={ CgOrganisation } h=\"5\" w=\"5\" color=\"grey.400\" />\r\n                        </IconButton>\r\n                        <Text fontSize=\"sm\" fontWeight=\"medium\" color=\"green.900\"> IIIT Kottayam </Text> \r\n                    </Flex>\r\n                </a>\r\n            </Flex>\r\n            <Text fontSize=\"sm\" fontWeight=\"bold\" color=\"green.900\">Skills</Text>\r\n            <Divider color=\"lime\" orientation=\"horizontal\"/>\r\n            <Grid \r\n            templateColumns={{lg:'repeat(5, 1fr)' , base: 'repeat(3,1fr)'}}\r\n            gap={2}\r\n            p={2}>\r\n                <SkillTag icon={ RiFlutterFill } name=\"Flutter\" iconColor=\"blue.400\" />\r\n                <SkillTag icon={ SiAndroidstudio } name=\"Android\" iconColor=\"green.500\" />\r\n                <SkillTag icon={ SiReact } name=\"React\" iconColor=\"blue.700\" />\r\n                <SkillTag icon={ SiNodeDotJs } name=\"NodeJS\" iconColor=\"green.400\" />\r\n                <SkillTag icon={ SiMongodb } name=\"MongoDB\" iconColor=\"green.600\" />\r\n                <SkillTag icon={ DiPostgresql } name=\"PostgreSQL\" iconColor=\"blue.400\" />\r\n                <SkillTag icon={ SiPython } name=\"Python\" iconColor=\"blue.400\" />\r\n            </Grid>\r\n        </Flex>\r\n    </Box>\r\n}","import { \r\n    Box , \r\n    Flex , \r\n    Avatar , \r\n    IconButton , \r\n    Icon , \r\n    Tooltip \r\n} from '@chakra-ui/react';\r\nimport { \r\n    FaChevronRight ,\r\n    FaChevronLeft \r\n} from 'react-icons/fa';\r\nimport { useState } from 'react';\r\nimport React from 'react';\r\nimport ShowCard from './ShowCard';\r\n\r\nexport default function Header() : React.ReactElement{\r\n    var [isOpen, setIsOpen] = useState<boolean>(false);\r\n    return <Box \r\n    top=\"0\"\r\n    position=\"fixed\"\r\n    w={isOpen ? 'max-content':'min-content'}\r\n    >   \r\n        <Flex\r\n        flexDir={{ base : 'column' , lg: 'row'}}\r\n        alignItems=\"start\"\r\n        justifyContent=\"start\"\r\n        mt={10}\r\n        w=\"full\"\r\n        h=\"40\"\r\n        p=\"4\"\r\n        >\r\n            <Avatar \r\n            src=\"https://avatars.githubusercontent.com/u/62293640?v=4\"\r\n            h=\"10\" \r\n            w=\"10\" />\r\n            \r\n            <Tooltip\r\n            hasArrow\r\n            label={isOpen? 'Shrink':'Expand To Read About Me'}\r\n            >\r\n                <IconButton\r\n                aria-label=\"Icon\"\r\n                colorScheme=\"blackAlpha\"\r\n                onClick={\r\n                    (e:any)=>{\r\n                        setIsOpen(!isOpen);\r\n                    }\r\n                }\r\n                >\r\n                    <Icon as={\r\n                        isOpen? FaChevronLeft:FaChevronRight\r\n                    } />\r\n                </IconButton>\r\n            </Tooltip>\r\n\r\n            <ShowCard isVisible={isOpen} />\r\n\r\n        </Flex>\r\n    </Box>;\r\n}","import { \r\n    Box ,\r\n    Flex ,\r\n    Text ,\r\n    Tag\r\n} from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { CardHead } from '../../../../Models';\r\n\r\nexport default function CardHeader( { title , lang } : CardHead ) :React.ReactElement{\r\n    return <Box\r\n    w=\"full\"\r\n    p=\"4\"\r\n    >\r\n        <Flex\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        >\r\n            <Text fontSize=\"xl\" fontWeight=\"bold\">{title}</Text>\r\n            <Tag\r\n            color=\"teal.400\"\r\n            >\r\n                <Text fontSize=\"sm\">{lang}</Text>\r\n            </Tag>\r\n        </Flex>\r\n    </Box>\r\n}","import _ from \"lodash\";\r\nimport { ReadMeKey , ReadMeValue , ReturnValue } from \"../Models\";\r\n\r\nexport const fetchReadMeFromURL : Function = async( url : string) : Promise<string> => {\r\n    const res : string | Response | (() => Promise<string>) = await fetch(url).then(res => res.text());\r\n    if( _.isString( res ) ){\r\n        return res;\r\n    }\r\n    return '';\r\n}\r\n\r\n/*\r\npossible types are :\r\n#+.*?\\n\r\n\\s*?\\n\r\n[\\w\\s\\n\\.]+?\r\n```.*?``` =>extract first\r\n!?[.*?](.*?)\\n => extract first\r\n*/\r\n\r\nexport const getHeaderSize : Function = ( c: string ): string => {\r\n    if( c === '1')\r\n        return 'xl';\r\n    return 'lg';\r\n}\r\n\r\nexport const extractCodeAndLinkFromReadMe : Function = ( text : string ) : ReturnValue=> {\r\n    let re = /(```(.|\\n)*?```)|(!?\\[.*?\\]\\(.*?\\))/g ;\r\n    let list : Array< string > = [];\r\n    let codes : null| RegExpMatchArray = text.match( re );\r\n    if( !_.isNull(codes) ){\r\n        for(let i=0;i<codes.length;++i){\r\n            list.push( codes[i].toString() );\r\n            text = text.replace( codes[i].toString() , '\\0' );\r\n        }\r\n    }\r\n    return {\r\n        text: text,\r\n        list: list\r\n    };\r\n}\r\n\r\nexport const getReadMeJSON : Function = ( data : string ) :  Map< ReadMeKey , ReadMeValue > =>{\r\n    const reCode = /```(.|\\n)*?```/g;\r\n    let obj : Map< ReadMeKey , ReadMeValue > = new Map();\r\n    const { text , list } : ReturnValue = extractCodeAndLinkFromReadMe( data );\r\n    const lines = text.split('\\n');\r\n    let k:number=0 , i:number=0;\r\n    let lastHeader :ReadMeKey = {\r\n        type:'',\r\n        info : '' ,\r\n        index: -1\r\n    }; \r\n    for( let line of lines ){\r\n        if( line === '\\0' ){\r\n            if( list[k].match( reCode ) ){\r\n                let lang : RegExpExecArray|null = /```(\\w+)/.exec( list[k] );\r\n                if( !_.isNull(lang)){\r\n                    obj.set( {\r\n                        type: 'code' ,\r\n                        info: lang[0].toString(),\r\n                        index : i\r\n                    } , {\r\n                        title:'',\r\n                        content : list[k].replace(/```(\\w+)|```/g , '')\r\n                    } );\r\n                }\r\n            }else{\r\n                let link : string = list[k].replace(/\\[|!|\\)/g , '').replace(/\\]\\s*\\(/g , '\\0').trim();\r\n                let [title , url] = link.split('\\0'); \r\n                if(list[k].includes( '.png' ) || list[k].includes( '.jpg' ) || list[k].includes( '.jpeg' )){\r\n                    obj.set( {\r\n                        type: 'link',\r\n                        info: 'image',\r\n                        index: i\r\n                    } , {\r\n                        title: title,\r\n                        content: url\r\n                    } );\r\n                }else{\r\n                    obj.set(  {\r\n                        type: 'link',\r\n                        info: 'normal',\r\n                        index: i\r\n                    } , {\r\n                        title: title,\r\n                        content: url\r\n                    } );\r\n                }\r\n            }\r\n            k++;\r\n        }else{\r\n            if( line.startsWith('#')){\r\n                const hashes : RegExpMatchArray|null = line.match(/#+/g);\r\n                const count:number = _.isNull( hashes ) ? 1: hashes[0].toString().length;\r\n                const title : string = line.replace( /#/g , '' ).trim();\r\n                lastHeader = {\r\n                    type: 'header',\r\n                    info: `${count}`,\r\n                    index: i\r\n                } ;\r\n                obj.set( lastHeader , {\r\n                    title : title,\r\n                    content : ''\r\n                } )\r\n            }else{\r\n                obj.set( lastHeader , {\r\n                    title : obj.get(lastHeader)?.title || '' ,\r\n                    content: obj.get( lastHeader)?.content+line || line\r\n                });\r\n            }\r\n        }\r\n        ++i;\r\n    }\r\n    return obj;\r\n}","import jsonData from '../data/data.json';\r\nimport { ProjectData } from '../Models';\r\nconst data = jsonData;\r\n\r\nexport const filterData : Function = ( lang : string ) : Array<ProjectData> => {\r\n    return data.filter( ( v : ProjectData) => {\r\n        return v.lang.toLowerCase() === lang.toLowerCase();\r\n    } );\r\n}\r\n\r\nexport const changeDirectory: Function = ( pname : string ) : Array<ProjectData> => {\r\n    return data.filter( ( v : ProjectData) => {\r\n        return v.header.toLowerCase() === pname.toLowerCase() ;\r\n    } );\r\n}\r\n\r\nexport const searchData : Function = ( word : string ) : Array<ProjectData> => {\r\n    return data.filter( ( v : ProjectData) => {\r\n        return v.lang.toLowerCase().includes( word.toLowerCase() ) || v.url.toLowerCase().includes( word.toLowerCase() ) || v.header.toLowerCase().includes( word.toLowerCase() ) || v.description.toLowerCase().includes( word.toLowerCase() );\r\n    } );\r\n}\r\n\r\nexport const sortData : Function = ( sType : string ) : Array<ProjectData> => {\r\n    return data.sort( ( x : ProjectData , y: ProjectData ) => {\r\n        return sType === 'increasing' ?\r\n        ( x.header > y.header ? 1: -1 ) : ( x.header < y.header ? 1: -1 );\r\n    } );\r\n}","import { \r\n    Box,\r\n    Text,\r\n    Flex,\r\n    Divider,\r\n} from \"@chakra-ui/layout\";\r\nimport { Image } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { \r\n    ReadMeKey ,\r\n    ReadMeValue\r\n} from \"../../../Models\";\r\nimport { getHeaderSize } from \"../../../helpers\";\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\n\r\nexport default function GetReadMeWidget( { rkey , rvalue} : { rkey : ReadMeKey , rvalue: ReadMeValue}) : React.ReactElement{\r\n    if( rkey.type === 'header'){\r\n        return <Flex\r\n        flexDir=\"column\"\r\n        >\r\n            <Text fontWeight=\"bold\" fontSize={ getHeaderSize( rkey.info) }> {rvalue.title} </Text>\r\n            <Divider orientation=\"horizontal\" />\r\n            <Text fontSize=\"smaller\"> {rvalue.content} </Text>\r\n        </Flex>;\r\n    }\r\n    else if( rkey.type === 'code' ){\r\n        return <Box maxW={{ base:\"100%\" , lg:\"xl\"}} m=\"2\" p=\"5\"><SyntaxHighlighter\r\n        showLineNumbers={true}\r\n        language={rkey.info}\r\n        style={docco}\r\n        >\r\n            { rvalue.content }\r\n        </SyntaxHighlighter></Box>;\r\n    }else if( rkey.type === 'link' ){\r\n        if( rkey.info === 'image' ){\r\n            return <Image\r\n            src={ rvalue.content }\r\n            alt=\"image\"\r\n            />\r\n        }else{\r\n            return <a\r\n            href={ rvalue.content }\r\n            >{rvalue.title}\r\n            </a>;\r\n        }\r\n    }\r\n    else return <></>;\r\n}","import { Box , Grid } from \"@chakra-ui/layout\";\r\nimport React from \"react\";\r\nimport { \r\n    ReadMeProps ,\r\n    ReadMeKey ,\r\n    ReadMeValue\r\n} from \"../../Models\";\r\nimport { fetchReadMeFromURL, getReadMeJSON } from \"../../helpers\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport GetReadMeWidget from \"./GetReadMeWidget\";\r\n\r\nexport default function ReadMe( { src } : ReadMeProps ) : React.ReactElement{\r\n    const [ text , setText ] = useState<string>('');\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            const data:string = await fetchReadMeFromURL(src);\r\n            setText( data );\r\n        };\r\n        fetchData();\r\n    } );\r\n    const readmeJson : Map< ReadMeKey , ReadMeValue > = getReadMeJSON( text );\r\n    const imgUrls : Array< [ReadMeKey , ReadMeValue]> = Array.from(readmeJson).filter( ( [k,v], i ) => {\r\n        return k.info === 'image';\r\n    })\r\n    const readmeUi = Array.from(readmeJson).map( ( [k,v], i ) => {\r\n        if(k.info === 'image')\r\n            return <></>;\r\n        return <Box\r\n        w={{ base:\"100%\" , lg:\"xl\"}}\r\n        >\r\n            <GetReadMeWidget key={i} rkey={k} rvalue={v} />\r\n        </Box>;\r\n    } );\r\n    const imageGrid = imgUrls.map( ([ k, v] , i) => {\r\n        return <GetReadMeWidget key={'image'+i} rkey={k} rvalue={v} />\r\n    } );\r\n    return <Box\r\n    >\r\n        {readmeUi}\r\n        <Grid \r\n            templateColumns='repeat(3,1fr)'\r\n            gap={1}\r\n            p={1}\r\n            id=\"grid\"\r\n            >\r\n                {imageGrid}\r\n        </Grid>\r\n    </Box>\r\n}","import { \r\n    Box ,\r\n    Flex ,\r\n    Text ,\r\n    IconButton , \r\n    Icon ,\r\n    Tooltip\r\n} from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { useState } from 'react';\r\nimport CardHeading from './CardHeading';\r\nimport {\r\n    RiArrowUpSLine ,\r\n    RiArrowDownSLine\r\n} from 'react-icons/ri';\r\nimport ReadMe from '../../ReadMe';\r\nimport { ProjectData } from '../../../Models';\r\n\r\nexport default function  ExpandableCard( props : ProjectData ) : React.ReactElement{\r\n    var [isOpen, setIsOpen] = useState<boolean>(false);\r\n    return <Box\r\n    overflowX=\"scroll\"\r\n    w={{ base:\"100%\" , lg:\"2xl\"}}\r\n    h={{ base: 'fit-content' , lg: 'fit-content' }}\r\n    boxShadow=\"2xl\"\r\n    p=\"5\"\r\n    m=\"2\"\r\n    borderRadius=\"2xl\"\r\n    bgColor=\"whiteAlpha.300\"\r\n    >\r\n        <Flex\r\n        flexDir=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        >\r\n            <Box w=\"full\">\r\n                <Flex\r\n                flexDir=\"column\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"start\"\r\n                >\r\n                    <CardHeading title={props.header} lang={props.lang} />\r\n                    <Text p=\"4\" fontSize=\"sm\" > {props.description} </Text>\r\n                    <Box\r\n                    display = { isOpen ? 'block' : 'none' }\r\n                    p=\"4\"\r\n                    >\r\n                        <ReadMe src={props.url} />\r\n                    </Box>\r\n                </Flex>\r\n            </Box>\r\n            <Tooltip\r\n            hasArrow\r\n            label={ isOpen ? \"close\" : \"explore\" }\r\n            >\r\n                <IconButton\r\n                aria-label=\"explore-icon\"\r\n                colorScheme=\"blackAlpha\"\r\n                onClick= {(e)=>{\r\n                    setIsOpen( ! isOpen );\r\n                }}\r\n                >\r\n                    <Icon as={ isOpen ? RiArrowUpSLine : RiArrowDownSLine } />\r\n                </IconButton>\r\n            </Tooltip>\r\n        </Flex>\r\n    </Box>\r\n}","import { \r\n    Box , \r\n    Flex , \r\n    Text ,\r\n    Icon\r\n} from '@chakra-ui/react';\r\nimport { AiFillCloseCircle } from 'react-icons/ai';\r\n\r\nexport default function TerminalTitle( { onClose } : { onClose: Function} ) : React.ReactElement{\r\n    return <Box\r\n    bgColor=\"grey\"\r\n    borderTopRadius=\"3xl\"\r\n    >\r\n        <Flex\r\n        flexDir=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        w=\"full\"\r\n        >\r\n            <Text mx=\"8\" fontSize=\"sm\" fontWeight=\"bold\">S_Terminal</Text>\r\n            <Box\r\n            mr=\"5\"\r\n            onClick = { (e)=>{\r\n                onClose();\r\n            }}\r\n            >\r\n                <Icon as={ AiFillCloseCircle } h=\"5\" w=\"5\" color=\"red\" />\r\n            </Box>\r\n        </Flex>\r\n    </Box>;\r\n}","import { \r\n    Box ,\r\n    IconButton,\r\n    Icon , \r\n    Tooltip,\r\n    Text ,\r\n    Flex ,\r\n    Input\r\n} from '@chakra-ui/react';\r\nimport TerminalTitle from './TerminalTitle';\r\nimport { useState } from 'react';\r\nimport React from 'react';\r\nimport { BsTerminal } from 'react-icons/bs';\r\n\r\n\r\nexport default function TerminalUI( {getCommand} : {getCommand :Function}) : React.ReactElement{\r\n    const [ lastText , setLastText ] = useState<string>('');\r\n    const [ isTerminalOpen , setIsTerminalOpen ] =  useState<boolean>(false);\r\n    const execCommand = (command : string , input : HTMLInputElement)=>{\r\n        if(command === 'clear' ||  command === 'cls'){\r\n            getCommand( command );\r\n            setLastText('');\r\n        }else{\r\n            let output:string = getCommand( command ) ;\r\n            setLastText(  lastText + '\\n$ '+input.value+'\\n  '+ output);\r\n        }\r\n        input.value = '';\r\n    }\r\n    if( ! isTerminalOpen){\r\n        return <Tooltip\r\n        hasArrow\r\n        label=\"Open Terminal\"\r\n        >\r\n            <IconButton\r\n                position=\"fixed\"\r\n                bottom={{ base: \"8\", lg:\"20\"}}\r\n                right={{ base: \"8\", lg:\"20\"}}\r\n                h=\"20\"\r\n                w=\"20\"\r\n                borderRadius=\"50%\"\r\n                aria-label=\"floating-button\"\r\n                colorScheme=\"blackAlpha\"\r\n                onClick = { (e)=>{\r\n                    setIsTerminalOpen(true);\r\n                }}\r\n                >\r\n                    <Icon color=\"white\" as={ BsTerminal } h=\"10\" w=\"10\" />\r\n            </IconButton>\r\n        </Tooltip>\r\n    }\r\n    return <Box\r\n    w=\"full\"\r\n    position=\"fixed\"\r\n    bottom=\"10\"\r\n    h=\"40\"\r\n    >\r\n        <TerminalTitle onClose={()=>{\r\n            setIsTerminalOpen(false);\r\n        }} />\r\n\r\n        <Box\r\n        h=\"full\"\r\n        w=\"full\"\r\n        borderWidth=\"thick\"\r\n        borderColor=\"grey\"\r\n        bgColor=\"black\"\r\n        minH=\"20\"\r\n        overflowY=\"scroll\"\r\n        >\r\n            <Flex\r\n            flexDir=\"column\"\r\n            justifyContent=\"start\"\r\n            alignItems=\"start\"\r\n            >\r\n                { lastText.split('\\n').map( (v , i) => {\r\n                    return <Flex\r\n                    flexDir=\"row\"\r\n                    justifyContent=\"start\"\r\n                    alignItems=\"center\"\r\n                    >\r\n                        <Text px=\"1\" textColor = \"green.400\" >{v.substring(0,2)}</Text>\r\n                        <Text px=\"1\" textColor = \"white\">{v.substring(2,v.length) || ''}</Text>\r\n                    </Flex>\r\n                } )}\r\n            </Flex>\r\n            <Flex\r\n            flexDir=\"row\"\r\n            justifyContent=\"start\"\r\n            alignItems=\"center\"\r\n            >\r\n                <Text px=\"1\" textColor = \"green.400\">{'$ '}</Text>\r\n                <Input\r\n                border=\"none\"\r\n                px=\"1\"\r\n                w=\"full\"\r\n                textColor = \"white\"\r\n                onKeyDown={(e)=>{\r\n                    if(e.keyCode === 13 ){\r\n                        let value : string  = e.currentTarget.value.trim();\r\n                        execCommand( value , e.currentTarget );\r\n                        e.preventDefault();\r\n                        if(e.currentTarget.parentElement){\r\n                            if(e.currentTarget.parentElement.parentElement){\r\n                                e.currentTarget.parentElement.parentElement.scrollTop = e.currentTarget.parentElement.parentElement.scrollHeight;\r\n                            }\r\n                        }\r\n                    }\r\n                }}\r\n                _focus={{ outline:'none' }}\r\n                >\r\n                </Input>\r\n            </Flex>\r\n        </Box>\r\n    </Box>;\r\n}","import { \r\n    Box  ,\r\n    Grid,\r\n    Heading\r\n} from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport ExpandableCard from './ExpandableCard';\r\nimport jsonData from '../../data/data.json';\r\nimport { ProjectData } from '../../Models';\r\nimport TerminalUI from '../TerminalUI';\r\nimport { useState } from 'react';\r\nimport { execCommand , sortData ,searchData , filterData , changeDirectory } from '../../helpers';\r\nimport { Command } from '../../Models';\r\n\r\nexport default function  Main() : React.ReactElement{\r\n    const [ cards , setCards ] =  useState<Array<ProjectData>>(jsonData);\r\n    const performOperation =  function( operation : Command ){\r\n        if( operation.func === 'sort' ){\r\n            if( operation.subFunc !== 'invalid'){\r\n                setCards([...sortData( operation.subFunc )]);\r\n                return;\r\n            }\r\n        }else if( operation.func === 'search' ){\r\n            if( operation.subFunc !== 'invalid'){\r\n                setCards([...searchData( operation.subFunc )]);\r\n                return;\r\n            }\r\n        }else if( operation.func === 'filter' ){\r\n            if( operation.subFunc !== 'invalid'){\r\n                setCards(filterData( operation.subFunc ));\r\n                return;\r\n            }\r\n        }else if( operation.func === 'cd' ){\r\n            if( operation.subFunc !== 'invalid'){\r\n                setCards(changeDirectory( operation.subFunc ));\r\n                return;\r\n            }\r\n        }else\r\n            setCards([...jsonData]);\r\n    }\r\n    return <Box\r\n    w=\"full\"\r\n    h=\"full\"\r\n    p=\"2\"\r\n    >\r\n        <Heading p=\"4\" color=\"twitter.400\">Projects</Heading>\r\n        <Grid\r\n        templateColumns={{lg:'repeat(2, 1fr)' , base: 'repeat(1,1fr)'}}\r\n        gap={3}\r\n        p={3}\r\n        >\r\n            {cards.map( (v : ProjectData , i) => {\r\n               return  <ExpandableCard\r\n                        header = { v.header}\r\n                        url = {v.url}\r\n                        description = {v.description}\r\n                        lang={v.lang}\r\n                />;\r\n            } )}\r\n        </Grid>   \r\n        <TerminalUI getCommand={function(cmd : string) : string{\r\n            return execCommand( cmd , performOperation );\r\n        }}/>\r\n    </Box>\r\n}","import { Command , CommandJSON } from \"../Models\";\r\n\r\n\r\nexport const commandStringToJSON : Function = ( commandLine : string ) : CommandJSON => {\r\n    commandLine = commandLine.trim().toLowerCase();\r\n    const words = commandLine.split( /\\s+/ );\r\n    if( ! words.length )\r\n        return {\r\n            main : 'invalid' ,\r\n            args : []\r\n        }\r\n    return {\r\n        main : words[0] ,\r\n        args : words.slice( 1 , words.length )\r\n    }\r\n} \r\n\r\n\r\n/*\r\ncommands are:\r\nsort -a|-d\r\ncd ..|repoName\r\nfilter langName\r\nsearch word\r\n*/\r\n\r\nconst isValidCommand : Function = ( cmd : string ) : boolean => {\r\n    if( [ 'sort' , 'filter' , 'cd' , 'search' ].includes( cmd ) )\r\n        return true;\r\n    return false;\r\n}\r\n\r\nconst getSubFunc : Function = ( main : string , arg : Array<string> ) : string => {\r\n    if( main === 'cd' ){\r\n        return arg[0] === '..' ? 'back' : arg[0];\r\n    }else if ( main === 'filter' )\r\n        return [ 'python' , 'dart' , 'javascript' , 'typescript' , 'java' , 'html' , 'css' ].includes(arg[0]) \r\n            ? arg[0] : 'invalid';\r\n    else if( main === 'sort' )\r\n        return arg[0] === '-a' ? 'increasing' : ( arg[0] === '-d' ? 'decreasing' : 'invalid' ) ;\r\n    else if( main === 'search')\r\n        return arg.join( ' ' ) ; \r\n    return 'invalid';\r\n}\r\n\r\nexport const validateCommand : Function = ( cjson  : CommandJSON ) : Command => {\r\n    if( isValidCommand( cjson.main ) ){\r\n        if( ( cjson.main === 'search' && cjson.args.length > 0 ) || ( cjson.main !== 'search' && cjson.args.length === 1 ) ){\r\n            return {\r\n                func: cjson.main,\r\n                subFunc: getSubFunc( cjson.main ,cjson.args )\r\n            }\r\n        }else{\r\n            return {\r\n                func: cjson.main,\r\n                subFunc: 'invalid'\r\n            }\r\n        }\r\n    }else{\r\n        //invalid\r\n        return {\r\n            func: 'invalid',\r\n            subFunc: null\r\n        }\r\n    }\r\n}\r\n\r\nexport const execCommand : Function = ( command: string  , callback : Function ) : string=> {\r\n    const cjson : Command = validateCommand( commandStringToJSON( command ) );\r\n    command = cjson.func;\r\n    if ( cjson.func === 'sort' ){\r\n        if( cjson.subFunc === 'invalid' || cjson.subFunc === null ){\r\n            callback(cjson);\r\n            return `${command} command : arguments are invalid`;\r\n        }else{\r\n            callback(cjson);\r\n            return `${command} executed : list sorted in ${cjson.subFunc} order`;\r\n        }\r\n    }else if ( cjson.func === 'filter' ){\r\n        if( cjson.subFunc === 'invalid' || cjson.subFunc === null ){\r\n            callback(cjson);\r\n            return `${command} command : arguments are invalid`;\r\n        }else{\r\n            callback(cjson);\r\n            return `${command} executed : list filtered with ${cjson.subFunc} projects`;\r\n        }\r\n    }else if ( cjson.func === 'cd' ){\r\n        if( cjson.subFunc === 'invalid' || cjson.subFunc === null ){\r\n            callback(cjson);\r\n            return `${command} command : arguments are invalid`;\r\n        }else{\r\n            callback(cjson);\r\n            return `${command} executed : moved to ${cjson.subFunc} project`;\r\n        }\r\n    }else if ( cjson.func === 'search' ){\r\n        if( cjson.subFunc === 'invalid' || cjson.subFunc === null ){\r\n            callback(cjson);\r\n            return `${command} command : arguments are invalid`;\r\n        }else{\r\n            callback(cjson);\r\n            return `${command} executed : search results for ${cjson.subFunc}`;\r\n        }\r\n    }else{\r\n        callback(cjson);\r\n        return `Invalid Command : ${command}`;\r\n    }\r\n}\r\n\r\n","import { \n  ChakraProvider ,\n  Box ,\n  Heading \n  } from '@chakra-ui/react';\nimport Header  from './Components/Header';\nimport Main from './Components/Main';\n\nexport default function App() {\n  return (\n    <ChakraProvider>\n      <Box\n      textAlign=\"center\"\n      alignItems=\"center\"\n      p=\"4\"\n      >\n        <Heading>PORTFOLIO</Heading>\n      </Box>\n      <Main/>\n      <Header/>\n    </ChakraProvider>\n  );\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}